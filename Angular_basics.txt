Angular is a JS framework which allows you to create reactive Single-Page-Applications (SPAs).


			How Angular works in browser:

Index.html is the only page served on the client side (browser)

In the project, 'main.ts' is loaded first on runtime (and adds a bunch of 'script' elements in the end of the index.html file in the browser) which basically points to 'app.module' which contains 'bootstrap: [AppComponent]' so basically, the code inside AppComponent gets into index.html inside '<app-root>'



			Components
Components are key features in Angular. You build your whole application by composing it from a couple of components, which are created by us.

Angular uses componnets to build webpages.

We put the rest of the components inside the 'AppComponent', thier selecteor would be added into the 'app.component.html' file

To build a component, create new folder inside the 'app' folder and name it such that folder name = component name. Each component typically should have its own folder. To create the component inisde this folder, convention: '[component_name].component.ts' (eg, 'server.component.ts')


Component = TS class, it has to be exported to be used outside the file it is being defined

naming convention: 'export class ServerComponent' (name of the component, followed by desscription)

To tell angular it is not just any typescript but a component, a decorator(@Component()) is added on top of the class (Decorators enhance your elements you use in code)

To import the decorator : import { Component } from '@angular/core';

You need to pass a JS object to @Component() decorator to configure it 
In the js object: following properties are important: 'selector'and 'templateUrl'



			Modules
To use our own components, some modification is needed in 'app module'
Angular uses modules to basically bundle different pieces, e.g. components of your app into 'packages'
A module is bundle of functionalities of our app and it gives Angular the information which features does my app have and use.

Register your component in 'app.module.ts' inside the array in 'declarations' property in JS object of @NgModule() decorator. 


No 'ts' extension while importing the component, they are added by 'webpack' which bunldes our project automatically.

The property 'imports' in @NgModule() JS object simply allows us to add some other modules to this module

If you generate component through CLI, it is automatically added to app.module.ts, hence recommended to use CLI approach.

			SPEC File details
SPEC file in a component is used for testing.

			Templates
External template file = separate component.html file that gets created inside the component (refernced by 'templateUrl' in the JS object in @Component decorator in component.ts)
Internal template = html code within the component.ts file (refernced by 'template' in the JS object in @Component decorator in component.ts)

Inside the 'template' property in JS object, you can write html code, you can use back-ticks (`) to write multi-line html code. 

Either template or templateUrl must be present in the JS object.

			Component Styles
We can use bootstrap defined html classes for styling or create/overwrite our style just like normal css in component.css

We can make use of 'styleUrls' (an 'array', since multiple stylesheets could be referenced here) to refernce to an eternal css file
and 'styles' (an array of strings) to write inline styles for the component

Can't use both 'styles' and 'styleUrls'. Only one of them can be used!!

			Selector
Selector could be an element, ('app-servers'), could be an attribute ('[app-servers]'), could be class ('.app-severs')

Selecting by id isn't supported by Angular.


			Data Binding
Data Binding = Communication between TypeScript code of component(Business logic) and the template(HTML)

A) Output data from Component to Template ways/forms:
1) String interpolation ({{data}})
2) Property Binding ([property]="data")

B) React to (Users) Events (from Template to Component communication):
1) Event Binding ((event)="expression")

C) Combination of both = Two-Way-Binding (([ng-Model])="data")

			STRING INTERPOLATION
String interpolation refers to supplying the property(variable) from component to template, where in template '{{}}' syntax is used where in between TypeScript expression that could be resolved into string at the end could be written. We can't write multi-line expression between the {{}} synatx in template, can't write block expressions (if/for blocks), can write a ternary expression.

			PROPERTY BINDING
There are a lot of times where we can use 'string interpolation' or 'property binding'.
Suppose you want to bind a variable(property) you defined to an attribute defined in HTML code, which could be changed dynamically, you enclose that attribute inside '[]'.

Square brackets ([]) indicate to Angular that we are using property binding, i.e. we want to dynamically bind some property.

In the end, a normal HTML only sets a specific property on the underlying DOM element. (Each HTML we use is parsed by the browser and kind of translated into an element on the document object model (DOM). An element in DOM has a couple of properties, a lot of it can't even be set through attributes on the HTML element). One of the properties is the 'disabled' property, which can be set through disabled attribute.

But here([disabled]), we aren't using the disabled attribute but we are directly binding to this native disabled property this HTML element has!

You give a value to the property by an expression between the quotation marks ("") (which for 'disabled' property resolves to a boolean) (For other properties, other types may be required.)

We bind to the HTML element property(native element property) the TypeScript property. So as soon as the TypeScript property changes, the property of the HTML element gets changed in the DOM at runtime.

Besides binding to HTML properties, we can also bind to other properties for example of 'directives' and our 'own components'.


			PROPERTY BINDING VS STRING INTERPOLATION
When you want to output something in your template, print some text to it, use string interpolation.

If you want to change some property, be that of an HTMl element/directive/component, use property binding.

Don't mix property binding ([HTML_property]="TS_property") and string interpolation({{TS_property}})!

In property binding, between the quotation marks (""), write TypeScript expression which will return the value the HTML property expects. A method could also be called here.


			EVENT BINDING
Generally, the methods that are called in response to an event start with 'on' (Not a fixed rule, but makes it easier to understand that this is a method meant for response to an event.)

Typically, we have onclick attribute on HTML element where we can execute some JavaScript code but we don't use that with Angular.

Event Binding can be done to all the events being made available by the HTMl attribute, you are writing the Angular binding on

Syntax for event binding:
(click)="onCreateServer()"

Between the "", you put in the code you want to execte once the event occurs, often method is called here. Since we want it to be executed when the event occurs we append () at the end of method name. Instead of method we could have put in the code we wish to execute here, not  a very good practice if there is lot of logic.

Passing and Using Data with Event Binding:
	'$event' (sort of reserved variable name) is used to give access about the event data. To capture data, '$event' is passed as an arguement to the method we are calling, or used anywhere between these "" in the code we are executing on that event.


			TWO WAY DATABINDING
We need to enable ngModel directive for 2 way databinding to work. For that we need to add FormsModule to the imports[] array in AppModule, also import { FormsModule } from '@angular/forms'.

Two way binding  = combination of property binding and event binding

Combine [](property binding) with ()(event binding) = [(ngModel)](2-way binding)

[(ngModel)] = 'TS_property'


			DIRECTIVES
Directives = Instructions in the DOM
Components are directives(with template) as we place there selector in the templates and accordingly the DOM adds our code in the template where the selecteor is used. 

There are other directive without a template.
e.g.: <p appTurnGreen>Receives a green background</p>

Here, 'appTurnGreen' would be a custom directive we could build.

We typically add directives with attribute selectors, but technically the selecteor of a directive can be configured just like the selecteor of a component, hence we can use CSS classes or the element style, but we use the typical attribute style.


Angular would find this instruction from the component.ts file where we have defined our customed directive using the directive decorator to inform Angular
@Directive({
	selecteor: '[appTurnGreen]'
})

export class TurnGreenDirective{
	...
}

There are a couple of built-in directives.

			ngIf DIRECTIVE
This directive can be used to output data conditionally.

Added as an attribute with *ngIf, * is required because it is a structural directive, i.e. it changes the structure of our DOM.
It either adds the element or doesn't add it.

The value to ngIf is given between the "", the value is an expression which would result in true or false, deciding whether this should be added or not.

ngIf condition can be enhanced by else condition, so in the else element, you can place a local refernce(e.g.: "#noServer") and use the directive component shipped with Angular 'ng-template', it can be used to mark places in the DOM.
We can enhance ngIf by adding else then the local refernce we used in the ng-template component.

			ATTRIBUTE DIRECTIVES
Unlike structural directives, attribute directives don't add or remove elements. They only change the element they were placed on.

They look like normal HTML attributes (i.e. without '*').

Constructor = Built in method, each typescript class has which is called once this component is created.

			ngStyle
ngStyle is an attribute directive. It is used to style elements dynamically.
<p [ngStyle]="{'background-color': getColor()}">

In the above example, since the property of this directive is also ngStyle, hence we have done the property binding here on ngStyle directive!

			ngClass
ngClass allows us to dynamically add or remove CSS classes.

Note:
<p [ngStyle]="{'background-color': getColor()}" [ngClass]="{online: serverStatus === 'online'}">Server with ID {{ serverId }} is {{ getServerStatus() }}</p>

In the above example, we have passed a JS object, this is specific to this property of this directive (ngClass).

Each property we may bind to may take a different value.

Like disabled takes true or false, this property of ngClass takes a JS object.

Here JS object of ngClass works like this:
	Key-value pairs. The keys are the CSS class names and values are the conditions determining whether this class should be attached or not.

	In the above example, we have an 'online' class, (we could wrapped inside a quotation mark i.e.
	(<p [ngStyle]="{'background-color': getColor()}" [ngClass]="{'online': serverStatus === 'online'}">Server with ID {{ serverId }} is {{ getServerStatus() }}</p>))

	The condition checking whether the server status is online is the value in the JS object for the key 'online'.


			ngFor DIRECTIVE
ngFor is a structural directive, hence we need to use *, in front of it while using it.
In the right hand of side, we define a local variable for inside a loop, then 'of' then TS property we created in the component.ts file.

e.g.: *ngFor="let server of servers"

Individual elemnts(not index!) of the servers array is given to server in iterations.

Then this server variable can be used in templte.

Note:
	Current index of iteration example:
	<div *ngFor="let buttonClick of buttonClicks; let i=index">
		<!-- Here, i points to current index of the iteration, '=index' is reserved expression -->
		<p [ngStyle]="{backgroundColor: i >= 4 ? 'blue' :''}" [ngClass]="{'future-logs': i >= 4}">{{ buttonClick }}</p>
	</div>


			DEBUGGING
Use 'sourcemaps' in the browser to debug the logical errors. 

			CUSTOM PROPERTY AND EVENT BINDING
Note: Property and Event Binding is not only limited to HTML elements(Native Properties and events) but we can use it with Directives(Custom properties and Events) we can also use it on our own components(Custom properties and Events)

For binding to a custom property on a compoent so that the property can be utilised by other components, decorator '@Input()' has to be given

Assigning an alias to custom properties:
	@Input('srvElement') element: {type: string, name: string, content: string};

and in parent component html:
 <app-server-element [srvElement]="serverElement"></app-server-element>

In case an alias is defined, only that work, not the property defined in the component.

Binding to custom events:
	serverCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();

	EventEmiiter is an object in Angular framework which allows to you emit your own events. To be able to bind to the event, we used '@Output()' decorator 
Alias is same as in binding to custom properties:
@Output('bpCreated') blueprintCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();
  
  Action on which custom event should be triggered.
  onAddBlueprint() {
    this.blueprintCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent,
    });
  }
  
 The custom property and event binding are key features in component communication. Through services too, components can communicate with each other.


			VIEW ENCAPSULATION
Generally, in CSS working, it doesn't care in which css file you define the rule, it simply is applied to a whole document normallly. View Encapsulation is a behavior enforced by Angular, meaning CSS properties defined inside the component will be applied to the content of that component, not to any other component outside of it. The way Angular does view encapsulation is by giving the same attribute to all the element in a component.

We can override view encapsulation, add this to @Component in component.ts:
encapsulation: ViewEncapsulation.None

ViewEncapsulation.Emulated is default, hence we don't need to choose that
Using ViewEncapsulation.None prevents angular from adding the attributes to the elements of that particular component. Now if we define any css file for this file, they will get applied globally, not just to this component specifically.


			USING LOCAL REFERENCES IN TEMPLATES
Local Reference can be plced on any HTMl element, you can add it with '#' (e.g.: '#serverName'). This basically gives us a reference to this element, not its value, rather to the whole HTML element with its properties. We can pass this local reference to everywhere inside the tempplate (e.g.:

	<button (click)="onAddServer(serverName)">Add Server</button>
), but we cannot use them as it is inside our typescript code. Since we have called this onAddServer() method isnide our template hence we are able to use serverNameInput, and this way we are able to pass it to the TS code.

			GETTING ACCESS TO THE TEMPLATE AND DOM WITH @ViewChild
With @ViewChild, we get direct access to elements from within our code (earlier we got access to the local-refernce via a method we used where local reference was passed.) Using @ViewChild, we get access to the element even before we call the element. The arguement to ViewChild method is the selector of the element (not like CSS selector, but the name of the local reference as a string as we gave is considered a selector here). We can also give a component as an arguement in the ViewChild() method if we are using that component within other component (e.g. in app-component => @ViewChild(CockpitComponent)), note CockpitComponent has not been passed as a string here, this would get access to the first occurence of the cockpit component in the app component.

ViewChild example with a local reference:

@ViewChild('serverContentInput', { static: false }) 
serverContentInput;

Here, the type of serverContentInput gives ElementRef (not the direct HTMLElement itself)

When passing the reference via ViewChild, it gives us the type 'ElementRef' (an angular type, imported via @angular/core), not the direct element itslef as in case of passing local-reference via method to TS code. We can access the element via a property it has, 'nativeElement' property. With this we get direct access to the elements in our DOM, through @ViewChild.

We can control the properties of the HTML template through our typescript code via Local reference; however not recommended. We should do string interpolation or property binding rather using this method to output something in the DOM. Directives offer a better way of manipulating the DOM.

			
			PROJECTING CONTENT INTO COMPONENTS USING ng-content
This is yet another way to pass data around in our angular application. Sometimes, we have complex HTML code which we want to pass into a component from outside. If we try passing some other HTML code inside the opening and closing tags of our own components, it doesn't work (e.g.

<app-server-element *ngFor="let serverElement of serverElements" [srvElement]="serverElement">
        <!-- Testing if we can pass some other HTML code inside the opening and closing tags of our own components. Result => No, it doesn't work! -->
        <p>
          <strong *ngIf="serverElement.type === 'server'" style="color: red">{{ serverElement.content }}</strong>
          <em *ngIf="serverElement.type === 'blueprint'">{{ serverElement.content }}</em>
        </p>
      </app-server-element>
). It doesn't give any error, but the <p> tag result is not displayed on the DOM. It is the default behavior. Everything you place between the opening and closing tag of your own component, is lost by default. We can change this default behavior by using a directive, ng-content

Say you want to display that complex HTMl code as a part of server-element component template, you simply write <ng-content></ng-content> where the HTML code will reside, using ng-content, Angular will put everything it found between the opening and closing tags of our custom components and place it here. This is called as projection in component where we used ng-content directive/hook.


			UNDERSTANDING THE COMPONENT LIFECYCLE
ngOnInit() is a lifecycle hook of many lifecycle hooks that Angular supports.

If a new component is created in Angular, Angular goes through a couple of steps in the creation process of a component. Angular gives us a chance to hook into these phases and execute some code. We can call some methods which Angular will call while the creation process.


ngOnChanges() ---> Called after a bound input property changes (maybe executed multiple times. Executed right at the start when the component is created, then always whenever one of our bound input properties change, propeties decorated with @Input)

ngOnInit() ---> Called once the component is initialized. Initialization does not mean we can see it, as in it has yet not been added to the DOM, but Angular finished the basic initialization. Our properties can be  initialized, means the object was created. ngOnInit() will run after the constructor.

ngDoCheck() ---> Called during every change detection run. Runs multiple times, ngDoCheck() is done in a very effecient way. It doesn't cost a lot of performance. Partcularly great to use, when we have something to do on every change detection cycle, maybe manually inform Angular about some change that it would not be able to detect otherwise. 

ngAfterContentInit() ---> Called after content (ng-content) has been projected into view. So the view of the parent component escpecially a part that will get added to our component eventually, this hook runs.

ngAfterContentChecked() ---> Called every time the projected component has been checked.

ngAfterViewInit() ---> Called after the component's view (and child views) has been initialized. 

ngAfterViewChecked() ---> Called every time the view (and child views) have been checked

ngOnDestroy() ---> Called once the component is about be destroyed. Great for clean up work, called right before the object itself will be destroyed by Angular.


			LIFECYCLE HOOKS AND TEMPLATE ACCESS
Template Access is possible only after ngAfterViewInit() hook is called, not before that. ngAfterViewInit gives you access to the template elements, you can access them and use their values; But before this content is reached, we can't do that; i.e., can't check the value of some element in DOM, because it hasn't been rendered yet!


			GETTING ACCESS TO ng-content with @ContentChild
If the content is going to passed to another component via ng-content, you can get access to the element via @ContentChild() as we get with ViewChild() had that element been in the same component in which wish to access. We get access to the content only after ngAfterContentInit life-cycle gets called.


			DIRECTIVES DEEP DIVE
Recap of Attribute directive vs Structural Directive:
	- Attribute directives sit on elements just like attributes, through them we have no capability to destroy an element from the DOM whereas structural directives too sit on the elements as attributes only but with a leading star(e.g.: *ngIf)(for desugaring) and they are capable of changing the structure of DOM (can destroy/add elements) around this element.
	- Attribute Directives look like a normal HTML Attribute (possibly with databinding or event binding). Only affect/change the element they are added to.
